--- eeepc-fancontrol/usr/bin/eeepc-fancontrol	2012-05-06 16:13:54.000000000 +0000
+++ eeepc-fancontrol-new/usr/bin/eeepc-fancontrol	2012-05-06 16:11:04.000000000 +0000
@@ -5,15 +5,16 @@
 #  Author Blog  : http://www.ireemo.de/ (english)
 #  Project Home : http://code.google.com/p/eeepc-fancontrol/
 #
-# Needs eee.ko Module
+# Needs asus_eee.ko Module
 # Version 0.21
 
 use strict;
 use Sys::Syslog qw (:standard :macros);
+use POSIX qw(setsid _exit);
 
 ## Options
 # Check Temperature every X seconds
-my $interval	=	1;
+my $interval	=	10;
 
 # Maximum/Minimum Fan Speed
 my $maxSpeed	=	100;
@@ -34,6 +35,7 @@
 $SIG{TERM} = 'terminateFancontrol';
 $SIG{INT}  = 'terminateFancontrol';
 
+daemonize();
 openlog("eeepc-fancontrol", "ndelay", "local0");
 
 # Print some Information at syslog
@@ -120,8 +122,27 @@
 }
 
 sub checkModule {
-	if (`lsmod` !~ /eee/) {
-		system("modprobe eee");
-		syslog(LOG_INFO, "Inserted EEE Module");
+	if (`lsmod` !~ /asus_eee/) {
+		system("modprobe asus_eee");
+		syslog(LOG_INFO, "Inserted asus_eee Module");
 	}
 }
+
+sub daemonize
+{
+    chdir '/' or die "Can't chdir to /: $!";
+
+    open STDIN, '/dev/null' or die "Can't read /dev/null: $!";
+    open STDOUT, '>/dev/null' or die "Can't write to /dev/null: $!";
+
+    my  $pid;
+    defined($pid = fork) or die "Can't fork: $!";
+     _exit(0) if $pid;  # posix _exit to avoid problem with filehandles
+
+    setsid or die "Can't start a new session: $!";
+
+    defined($pid = fork()) or die "Can't fork (2): $!";
+    _exit(0) if $pid;  # 2nd fork avoids acquiring controlling terminal
+
+    open STDERR, '>&STDOUT' or die "Can't dup stdout: $!";
+}
